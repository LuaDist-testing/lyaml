before: |
  lyaml = require "lyaml"

  -- Always use the new multi-doc capable API.
  lyaml.legacy = lyaml.load
  lyaml.load = function (stream) return lyaml.legacy (stream, true) end

describe loading:
- it loads an empty stream:
    expect (lyaml.load "").should_equal {}
- it ignores comments: '
    expect (lyaml.load "# A comment\nnon-comment # trailing comment\n").
      should_equal { "non-comment" }'

- context documents:
  - it lyaml.loads an empty document:
      expect (lyaml.load "---").should_equal {""}
      expect (lyaml.load "---\n...").should_equal {""}
  - it lyaml.loads multiple documents:
      expect (lyaml.load "one\n---\ntwo").should_equal {"one", "two"}
  - it reports an empty document:
      expect (lyaml.load "---\n---\ntwo\n---\n").
        should_equal {"", "two", ""}

- context version directive:
  - it recognizes version number:
      expect (lyaml.load "%YAML 1.1\n---").should_equal {""}
  - it diagneses missing document start:
      expect (lyaml.load "%YAML 1.1").
        should_error "expected <document start>"
  - it diagnoses unsupported version:
      expect (lyaml.load "%YAML 2.0\n---").
        should_error "incompatible YAML document"

- context tag directive:
  - it recognizes primary tag directive: '
      expect (lyaml.load ("%TAG ! tag:yaml.org,2002:\n" ..
                         "---\n" ..
                         "!bool untrue")).should_equal {false}'
  - it recognizes secondary tag directive: '
      expect (lyaml.load ("%TAG !! tag:ben-kiki.org,2000:\n" ..
                         "---\n" ..
                         "!!bool untrue")).should_equal {"untrue"}'
  - it recognizes named tag directive: '
      expect (lyaml.load ("%TAG !bkk! tag:ben-kiki.org,2000:\n" ..
                         "---\n" ..
                         "!bkk!bool untrue")).should_equal {"untrue"}'
  - it diagnoses undefined tag handles: '
      expect (lyaml.load ("!bkk!bool untrue")).
        should_error "undefined tag handle"'

- context scalars:
  - it recognizes null: '
      expect (lyaml.load "~").should_equal {lyaml.null}'
  - it recognizes booleans: '
      expect (lyaml.load "yes").should_equal {true}
      expect (lyaml.load "true").should_equal {true}
      expect (lyaml.load "false").should_equal {false}
      expect (lyaml.load "no").should_equal {false}'
  - it recognizes numbers:
      expect (lyaml.load "123").should_equal {123}
      expect (lyaml.load "12.3").should_equal {12.3}
  - it recognizes strings:
      expect (lyaml.load "a string").should_equal {"a string"}

  - context global tags:
    - it recognizes !!bool:
        expect (lyaml.load "!!bool true").should_equal {true}
        expect (lyaml.load "!!bool yes").should_equal {true}
        expect (lyaml.load "!!bool no").should_equal {false}
        expect (lyaml.load "!!bool false").should_equal {false}
        expect (lyaml.load "!!bool garbage").should_equal {false}
    - it recognizes !!int:
        expect (lyaml.load "!!int 42").should_equal {42}
    - it recognizes !!float:
        expect (lyaml.load "!!float 3.141592").should_equal {3.141592}

- context sequences:
   - it recognizes block sequences:
       expect (lyaml.load "- ~\n- true\n- 42").
         should_equal {{lyaml.null, true, 42}}
   - it recognizes flow sequences:
       expect (lyaml.load "[~, true, 42]").
         should_equal {{lyaml.null, true, 42}}

- context mapping:
   - it recognizes block mapping: '
       expect (lyaml.load "null: ~\nboolean: yes\nnumber: 3.14").
         should_equal {{null = lyaml.null, boolean = true, number = 3.14}}'
   - it recognizes flow mapping: '
       expect (lyaml.load "{null: ~, boolean: yes, number: 3.14}").
         should_equal {{null = lyaml.null, boolean = true, number = 3.14}}'

- context anchors:
   - it resolves scalar anchors: '
       expect (lyaml.load "anchor: &SS Sammy Sosa\nalias: *SS").
         should_equal {{anchor = "Sammy Sosa", alias = "Sammy Sosa"}}'
   - it resolves sequence anchors: '
       expect (lyaml.load "anchor: &SEQ [Mark McGwire, Sammy Sosa]\nalias: *SEQ").
         should_equal {{anchor = {"Mark McGwire", "Sammy Sosa"},
                        alias  = {"Mark McGwire", "Sammy Sosa"}}}'
   - it resolves mapping anchors: '
   expect (lyaml.load "anchor: &MAP {Mark McGwire: 65, Sammy Sosa: 63}\nalias: *MAP").
         should_equal {{anchor = {["Mark McGwire"] = 65, ["Sammy Sosa"] = 63},
                        alias  = {["Mark McGwire"] = 65, ["Sammy Sosa"] = 63}}}'
